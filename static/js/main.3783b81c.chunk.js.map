{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/helpers/getVisibleTodos.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","value","filterReducer","status","query","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visibleTodos","useMemo","filterCase","searchQuery","filteredTodos","completed","trim","title","toLowerCase","includes","getVisibleTodos","handleButtonClick","currentTodoActions","setCurrentTodo","length","className","map","classNames","id","onClick","TodoFilter","setQuery","filterActions","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","getUserInfo","a","userId","Error","useEffect","href","email","name","App","isLoading","setIsLoading","loadTodos","todosFromServer","todoActions","loadTodosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3783b81c.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StatusAction = {\n  type: 'filter/STATUS',\n  payload: Status,\n};\n\ntype QueryAction = {\n  type: 'filter/QUERY'\n  payload: string,\n};\n\ntype Action = StatusAction | QueryAction;\n\nconst setStatus = (value: Status): StatusAction => ({\n  type: 'filter/STATUS',\n  payload: value,\n});\n\nconst setQuery = (value: string): QueryAction => ({\n  type: 'filter/QUERY',\n  payload: value,\n});\n\nexport const actions = { setStatus, setQuery };\n\ntype State = {\n  status: Status,\n  query: string,\n};\n\nconst filterReducer = (\n  state: State = { status: 'all', query: '' },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadTodosAction = {\n  type: 'todos/GET';\n  payload: Todo[];\n};\n\nconst loadTodos = (todos: Todo[]): LoadTodosAction => ({\n  type: 'todos/GET',\n  payload: todos,\n});\n\ntype State = Todo[];\ntype Action = LoadTodosAction;\n\nexport const actions = { loadTodos };\n\nconst todosReducer = (state: State = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/GET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { getVisibleTodos } from '../helpers/getVisibleTodos';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const setCurrentTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const visibleTodos = useMemo(() => (\n    getVisibleTodos(filter, todos, query)\n  ), [todos, filter, query]);\n\n  const handleButtonClick = (todo: Todo) => {\n    setCurrentTodo(todo);\n  };\n\n  return (\n    <>\n      {!visibleTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n                className={classNames({\n                  'has-background-info-light': currentTodo?.id === todo.id,\n                })}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames({\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleButtonClick(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('far', {\n                        'fa-eye': currentTodo?.id !== todo.id,\n                        'fa-eye-slash': currentTodo?.id === todo.id,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n\n    </>\n  );\n};\n","import { Todo } from '../../types/Todo';\n\nexport const getVisibleTodos = (\n  filterCase: string,\n  todos: Todo[],\n  searchQuery: string,\n) => {\n  let filteredTodos;\n\n  switch (filterCase) {\n    case 'active':\n      filteredTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    case 'completed':\n      filteredTodos = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      filteredTodos = todos;\n      break;\n  }\n\n  if (searchQuery.trim()) {\n    return filteredTodos.filter(todo => (\n      todo.title.toLowerCase().includes(searchQuery.trim().toLowerCase())\n    ));\n  }\n\n  return filteredTodos;\n};\n","import React, { ChangeEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const query = useAppSelector(state => state.filter.query);\n  const dispatch = useAppDispatch();\n\n  const setStatus = (value: Status) => (\n    dispatch(filterActions.setStatus(value))\n  );\n\n  const setQuery = (value: string) => (\n    dispatch(filterActions.setQuery(value))\n  );\n\n  const handleFilterChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setStatus(event.target.value as Status);\n  };\n\n  const handleQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleButtonClick = () => setQuery('');\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleFilterChange}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          value={query}\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {!!query.length && (\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"delete\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleButtonClick}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  const getUserInfo = async () => {\n    try {\n      if (!currentTodo?.userId) {\n        return;\n      }\n\n      const res = await getUser(currentTodo.userId);\n\n      setUser(res);\n    } catch {\n      throw new Error('Unable to load todo info');\n    }\n  };\n\n  const removeUserInfo = () => dispatch(currentTodoActions.removeTodo());\n\n  const handleButtonClick = () => removeUserInfo();\n\n  useEffect(() => {\n    getUserInfo();\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleButtonClick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { Todo } from './types/Todo';\nimport { actions as todoActions } from './features/todos';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const todo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const loadTodos = (todosFromServer: Todo[]) => dispatch(todoActions.loadTodos(todosFromServer));\n\n  const loadTodosFromServer = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      loadTodos(todosFromServer);\n    } catch {\n      throw new Error('Unable to load todos');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}